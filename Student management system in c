#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_STUDENTS 100

// Structure to store student details
struct Student {
    int id;
    char name[50];
    float marks;
};

// Array of students
struct Student students[MAX_STUDENTS];
int studentCount = 0;

// Function to add a student
void addStudent() {
    if (studentCount >= MAX_STUDENTS) {
        printf("Student limit reached!\n");
        return;
    }

    struct Student newStudent;
    printf("Enter student ID: ");
    scanf("%d", &newStudent.id);
    getchar();  // To consume the newline character
    printf("Enter student name: ");
    fgets(newStudent.name, sizeof(newStudent.name), stdin);
    newStudent.name[strcspn(newStudent.name, "\n")] = 0;  // Remove newline character
    printf("Enter student marks: ");
    scanf("%f", &newStudent.marks);

    students[studentCount] = newStudent;
    studentCount++;
    printf("Student added successfully!\n");
}

// Function to display all students
void displayStudents() {
    if (studentCount == 0) {
        printf("No students available.\n");
        return;
    }

    printf("List of Students:\n");
    printf("ID\tName\tMarks\n");
    for (int i = 0; i < studentCount; i++) {
        printf("%d\t%s\t%.2f\n", students[i].id, students[i].name, students[i].marks);
    }
}

// Function to search a student by ID
void searchStudent() {
    int id;
    printf("Enter student ID to search: ");
    scanf("%d", &id);

    for (int i = 0; i < studentCount; i++) {
        if (students[i].id == id) {
            printf("Student found: \n");
            printf("ID: %d\nName: %s\nMarks: %.2f\n", students[i].id, students[i].name, students[i].marks);
            return;
        }
    }
    printf("Student with ID %d not found.\n", id);
}

// Function to update student information
void updateStudent() {
    int id;
    printf("Enter student ID to update: ");
    scanf("%d", &id);

    for (int i = 0; i < studentCount; i++) {
        if (students[i].id == id) {
            printf("Updating student with ID %d\n", students[i].id);
            getchar();  // To consume the newline character
            printf("Enter new name: ");
            fgets(students[i].name, sizeof(students[i].name), stdin);
            students[i].name[strcspn(students[i].name, "\n")] = 0;  // Remove newline character
            printf("Enter new marks: ");
            scanf("%f", &students[i].marks);
            printf("Student updated successfully!\n");
            return;
        }
    }
    printf("Student with ID %d not found.\n", id);
}

// Function to delete a student by ID
void deleteStudent() {
    int id;
    printf("Enter student ID to delete: ");
    scanf("%d", &id);

    for (int i = 0; i < studentCount; i++) {
        if (students[i].id == id) {
            // Shift remaining students to the left
            for (int j = i; j < studentCount - 1; j++) {
                students[j] = students[j + 1];
            }
            studentCount--;
            printf("Student with ID %d deleted successfully!\n", id);
            return;
        }
    }
    printf("Student with ID %d not found.\n", id);
}

// Main menu function
void menu() {
    int choice;
    while (1) {
        printf("\nStudent Management System\n");
        printf("1. Add Student\n");
        printf("2. Display Students\n");
        printf("3. Search Student\n");
        printf("4. Update Student\n");
        printf("5. Delete Student\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addStudent();
                break;
            case 2:
                displayStudents();
                break;
            case 3:
                searchStudent();
                break;
            case 4:
                updateStudent();
                break;
            case 5:
                deleteStudent();
                break;
            case 6:
                printf("Exiting system.\n");
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }
}

// Main function
int main() {
    menu();
    return 0;
}
